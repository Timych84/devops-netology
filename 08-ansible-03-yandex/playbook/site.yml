---
- name: Install Clickhouse
  tags: clickhouse_install
  hosts: clickhouse
  handlers:
    - name: Start clickhouse service
      become: true
      ansible.builtin.service:
        name: clickhouse-server
        state: started
        enabled: true
  tasks:
    - name: Install Clickhouse | Download clickhouse block
      block:
        - name: Install Clickhouse | Download clickhouse distrib
          ansible.builtin.get_url:
            url: "https://packages.clickhouse.com/rpm/stable/{{ item }}-{{ clickhouse_version }}.noarch.rpm"
            dest: "./{{ item }}-{{ clickhouse_version }}.rpm"
            mode: '0440'
          with_items: "{{ clickhouse_packages }}"
      rescue:
        - name: Install Clickhouse | Download clickhouse distrib
          ansible.builtin.get_url:
            url: "https://packages.clickhouse.com/rpm/stable/clickhouse-common-static-{{ clickhouse_version }}.x86_64.rpm"
            dest: "./clickhouse-common-static-{{ clickhouse_version }}.rpm"
            mode: '0440'
    - name: Install Clickhouse | Install clickhouse packages
      become: true
      ansible.builtin.yum:
        name:
          - clickhouse-common-static-{{ clickhouse_version }}.rpm
          - clickhouse-client-{{ clickhouse_version }}.rpm
          - clickhouse-server-{{ clickhouse_version }}.rpm
      notify: Start clickhouse service
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Install Clickhouse | Flush handlers
      ansible.builtin.meta: flush_handlers
    - name: Install Clickhouse | Check if Clickhouse started
      ansible.builtin.service_facts:
      register: temp__service_facts
      until: temp__service_facts.ansible_facts.services["clickhouse-server.service"].state == 'running'
      retries: 20
      delay: 2
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Install Clickhouse | Create database
      ansible.builtin.command: "clickhouse-client  --host 127.0.0.1 -q 'create database logs;'"
      register: create_db
      failed_when: create_db.rc != 0 and create_db.rc != 82
      changed_when: create_db.rc == 0
- name: Configure Ð¡lickhouse
  tags: clickhouse_config
  hosts: clickhouse
  become: true
  handlers:
    - name: Restart clickhouse service
      ansible.builtin.service:
        name: clickhouse-server
        state: restarted
        enabled: true
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Restart firewalld service
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: true
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Reload firewalld service
      ansible.builtin.service:
        name: firewalld
        state: reloaded
  tasks:
    - name: Configure clickhouse | Install epel
      ansible.builtin.yum:
        name:
          - epel-release
    - name: Configure clickhouse | Install python-pip and firewalld
      ansible.builtin.yum:
        name:
          - python-pip
          - firewalld
        state: present
        update_cache: true
      ignore_errors: "{{ ansible_check_mode }}"
      notify: Restart firewalld service
    - name: Configure clickhouse | Install pip lxml
      ansible.builtin.pip:
        name: lxml
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Configure clickhouse | Create table for syslog
      ansible.builtin.command: "clickhouse-client  --host 127.0.0.1 -q '{{ clickhouse_syslog_table_query }}'"
      register: create_db
      failed_when: create_db.rc != 0 and create_db.rc != 57
      changed_when: create_db.rc == 0
    - name: Configure clickhouse | Modify clickhouse server config
      community.general.xml:
        path: "{{ clickhouse_server_config_file }}"
        xpath: /clickhouse/listen_host
        value: "{{ clickhouse_server_listen_ip_address }}"
        state: present
      notify: Restart clickhouse service
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Configure clickhouse | Modify clickhouse client config
      become: true
      community.general.xml:
        path: "{{ clickhouse_client_config_file }}"
        xpath: /clickhouse/profiles/default/date_time_input_format
        value: "best_effort"
        state: present
      notify: Restart clickhouse service
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Configure clickhouse | Open clickhouse port on firewalld
      ansible.posix.firewalld:
        port: 8123/tcp
        permanent: true
        state: enabled
      notify: Reload firewalld service
      ignore_errors: "{{ ansible_check_mode }}"
- name: Install Vector
  tags: vector_install
  hosts: vector
  handlers:
    - name: Restart vector service
      become: true
      ansible.builtin.service:
        name: vector
        state: restarted
        enabled: true
      ignore_errors: "{{ ansible_check_mode }}"
  tasks:
    - name: Install vector | Download vector distrib
      ansible.builtin.get_url:
        url: "https://packages.timber.io/vector/{{ vector_version }}/vector-{{ vector_version }}-1.x86_64.rpm"
        dest: "./vector-{{ vector_version }}.rpm"
        mode: 0644
    - name: Install vector | Install vector package
      become: true
      ansible.builtin.yum:
        name: vector-{{ vector_version }}.rpm
      notify: Restart vector service
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Install vector | Delete default vector config
      become: true
      ansible.builtin.file:
        path: /etc/vector/vector.toml
        state: absent
    - name: Install vector | Set default vector config file for service
      become: true
      ansible.builtin.template:
        src: "templates/vector.j2"
        dest: "{{ vector_default_config_file }}"
        mode: 0644
      notify: Restart vector service
    - name: Install vector | Vector config from template
      become: true
      ansible.builtin.template:
        src: "templates/vector.yml.j2"
        dest: "/etc/vector/vector.yml"
        mode: 0644
      notify: Restart vector service
    - name: Install vector | Flush handlers
      ansible.builtin.meta: flush_handlers
    - name: Install vector | Check if vector started
      ansible.builtin.service_facts:
      register: temp__service_facts
      until: temp__service_facts.ansible_facts.services["vector.service"].state == 'running'
      retries: 20
      delay: 2
      ignore_errors: "{{ ansible_check_mode }}"
- name: Install Lighthouse
  tags: lighthouse_install
  become: true
  hosts: lighthouse
  handlers:
    - name: Restart nginx service
      ansible.builtin.service:
        name: nginx
        state: started
        enabled: true
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Reload nginx service
      ansible.builtin.service:
        name: nginx
        state: reloaded
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Restart firewalld service
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: true
      ignore_errors: "{{ ansible_check_mode }}"
  tasks:
    - name: Install lighthouse | Install epel repo
      ansible.builtin.yum:
        name:
          - epel-release
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Install lighthouse | Install nginx, git and firewalld
      ansible.builtin.yum:
        name:
          - git
          - nginx
          - firewalld
        state: present
        update_cache: true
      notify:
        - Restart nginx service
        - Restart firewalld service
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Install lighthouse | Flush handlers
      ansible.builtin.meta: flush_handlers
    - name: Install lighthouse | Clone a lighthouse repo
      ansible.builtin.git:
        repo: "{{ lighthouse_repo_url }}"
        dest: "{{ document_root }}/lighthouse_repo"
        version: d701335
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Install lighthouse | Copy lighthouse to site folder
      ansible.posix.synchronize:
        src: "{{ document_root }}/lighthouse_repo/"
        dest: "{{ document_root }}/{{ app_root }}"
        perms: false
        recursive: true
        rsync_opts:
          - "--exclude=.git"
          - "--chown=nginx:nginx"
          - "--chmod=D750,F640"
      ignore_errors: "{{ ansible_check_mode }}"
      delegate_to: "{{ inventory_hostname }}"
    - name: Install lighthouse | Configure SELinux for nginx
      ansible.builtin.command: "chcon -R -t httpd_sys_content_t {{ document_root }}/{{ app_root }}"
      register: chcon_nginx
      changed_when: chcon_nginx.rc != 0
    - name: Install lighthouse | Open http/s port on firewalld
      ansible.posix.firewalld:
        service: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      loop:
        - http
        - https
      ignore_errors: "{{ ansible_check_mode }}"
    - name: Install lighthouse | Rewrite nginx main config file
      become: true
      ansible.builtin.template:
        src: "templates/nginx.conf.j2"
        dest: "{{ nginx_config_file }}"
        mode: 0644
      notify: Reload nginx service
    - name: Install lighthouse | Rewrite nginx lighthouse config file
      become: true
      ansible.builtin.template:
        src: "templates/lighthouse.conf.j2"
        dest: "{{ lighthouse_nginx_config_file }}"
        mode: 0644
      notify: Reload nginx service
